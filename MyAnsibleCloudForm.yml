---
Resources:
  # Create the VPC
  MyAnsibleVPC:
    Type: AWS::EC2::VPC
    Properties: 
      CidrBlock: '10.128.0.0/16'
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-playground-vpc'
  
  # Create each of the subnet
  MyAnsiblePublicSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '10.128.0.0/24'
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-playground-subnet-a'
      VpcId: !Ref MyAnsibleVPC
  MyAnsiblePrivateSubnetA:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: '10.128.8.0/24'
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-playground-subnet-a'
      VpcId: !Ref MyAnsibleVPC
  # Create Internet gateway
  MyInternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties: 
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-internet-gateway'
  
  # Attach IGW
  MyAttachIGWtoVPC:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties: 
      InternetGatewayId: !Ref MyInternetGateway
      VpcId: !Ref MyAnsibleVPC

  # Create Elastic IP addresses
  MyElasticIPForNatA:
    Type: AWS::EC2::EIP
    Properties:
      Domain: VPC
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-EIP-NAT-gateway-a'

  # Create NAT Gateways
  MyCreateNatGatewayA:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt MyElasticIPForNatA.AllocationId
      SubnetId: !Ref MyAnsiblePublicSubnetA
      Tags: 
        - Key: Name
          Value: !Sub '${AWS::StackName}-NAT-gateway-a'

  # Create all the routing tables
  MyPublicRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MyAnsibleVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-public-rt-a'
  MyPrivateRouteTableA:
    Type: AWS::EC2::RouteTable
    Properties: 
      VpcId: !Ref MyAnsibleVPC
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-private-rt-a'

  # Add IGW to route to our tables public traffic
  MyAddIGWRoutingRuleA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPublicRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref MyInternetGateway

  # Add NAT gateway routes to route tables
  MyAddNATRoutingRuleA:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref MyPrivateRouteTableA
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref MyCreateNatGatewayA

  # Make subnet association with route tables
  MyAssociatePublicSubnetAWithRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref MyPublicRouteTableA
      SubnetId: !Ref MyAnsiblePublicSubnetA
  MyAssociatePrivateWebserverASubnetWithRouteTable:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties: 
      RouteTableId: !Ref MyPrivateRouteTableA
      SubnetId: !Ref MyAnsiblePrivateSubnetA

  # Create the security groups
  MySecurityGroupForBastion:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Security Group created for Bation Host.
      VpcId: !Ref MyAnsibleVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-bastion-host-sg'
        - Key: Description
          Value: !Sub 'Security Group created for Bastion Host with ${AWS::StackName}.'
  MySecurityGroupForservers:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Sub 'Security Group created for Ubuntu servers with ${AWS::StackName}'
      VpcId: !Ref MyAnsibleVPC
      SecurityGroupIngress:
      - IpProtocol: tcp
        FromPort: 22
        ToPort: 22
        SourceSecurityGroupId: !Ref MySecurityGroupForBastion
      Tags:
        - Key: Name
          Value: !Sub '${AWS::StackName}-Ubuntuservers-sg'
        - Key: Description
          Value: !Sub 'Security Group created for Ubuntuservers with ${AWS::StackName}.'

  #Create NACL and subnet association
  MyNACLPublicSubnetA:
    Type: AWS::EC2::NetworkAcl
    Properties:
       VpcId: !Ref MyAnsibleVPC
       Tags:
       - Key: Name
         Value: NACLforSSHTraffic
  InboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref MyNACLPublicSubnetA
       RuleNumber: 100
       Protocol: 6
       RuleAction: allow
       CidrBlock: 0.0.0.0/0
       PortRange:
         From: 22
         To: 22
  OutboundRule:
    Type: AWS::EC2::NetworkAclEntry
    Properties:
       NetworkAclId: !Ref MyNACLPublicSubnetA
       RuleNumber: 100
       Protocol: -1
       Egress: true
       RuleAction: allow
       CidrBlock: 0.0.0.0/0

  MySubnetNetworkAclAssociation:
     Type: AWS::EC2::SubnetNetworkAclAssociation
     Properties:
       SubnetId : !Ref MyAnsiblePublicSubnetA
       NetworkAclId : !Ref MyNACLPublicSubnetA
         